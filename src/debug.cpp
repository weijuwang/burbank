/**
 * @file debug.cpp
 * @author Weiju Wang (weijuwang@aol.com)
 * @brief Debug utility functions.
 * @date 2022-08-26
 */

#include "debug.hpp"

using namespace burbank;

void debug::print(const parse::ast& tree, const std::size_t x /* = 0 */) noexcept
{
    for(int i = 1; i < x; ++i)
        std::cout << "  ";

    if(tree.name.has_value())
        std::cout << "- " << debug::nonterminalNames[*tree.name];

    std::cout << "\n";

    for(const auto& branch : tree.branches)
        debug::print(branch, x + 1);
}

std::map<nonterminal, std::string> debug::nonterminalNames = {
    {newlines, "newlines"},
    {whitespace, "whitespace"},
    {keyword, "keyword"},
    {identifier, "identifier"},
    {constant, "constant"},
    {stringLiteral, "stringLiteral"},
    {punctuator, "punctuator"},
    {operatorUnaryPositive, "operatorUnaryPositive"},
    {operatorUnaryNegate, "operatorUnaryNegate"},
    {operatorUnaryAddressOf, "operatorUnaryAddressOf"},
    {operatorUnaryDereference, "operatorUnaryDereference"},
    {operatorUnaryBitwiseNot, "operatorUnaryBitwiseNot"},
    {operatorUnaryLogicalNot, "operatorUnaryLogicalNot"},
    {operatorIncrementPrefix, "operatorIncrementPrefix"},
    {operatorDecrementPrefix, "operatorDecrementPrefix"},
    {operatorAddition, "operatorAddition"},
    {operatorSubtraction, "operatorSubtraction"},
    {operatorMultiplication, "operatorMultiplication"},
    {operatorDivision, "operatorDivision"},
    {operatorModulo, "operatorModulo"},
    {operatorBitwiseLeftShift, "operatorBitwiseLeftShift"},
    {operatorBitwiseRightShift, "operatorBitwiseRightShift"},
    {operatorLessThan, "operatorLessThan"},
    {operatorGreaterThan, "operatorGreaterThan"},
    {operatorLessThanOrEqualTo, "operatorLessThanOrEqualTo"},
    {operatorGreaterThanOrEqualTo, "operatorGreaterThanOrEqualTo"},
    {operatorEqualTo, "operatorEqualTo"},
    {operatorNotEqualTo, "operatorNotEqualTo"},
    {operatorLogicalAnd, "operatorLogicalAnd"},
    {operatorLogicalOr, "operatorLogicalOr"},
    {operatorBitwiseAnd, "operatorBitwiseAnd"},
    {operatorBitwiseOr, "operatorBitwiseOr"},
    {operatorBitwiseXor, "operatorBitwiseXor"},
    {operatorMember, "operatorMember"},
    {operatorIndirect, "operatorIndirect"},
    {operatorSizeof, "operatorSizeof"},
    {operatorIncrementPostfix, "operatorIncrementPostfix"},
    {operatorDecrementPostfix, "operatorDecrementPostfix"},
    {operatorAssign, "operatorAssign"},
    {operatorAssignMultiply, "operatorAssignMultiply"},
    {operatorAssignDivide, "operatorAssignDivide"},
    {operatorAssignModulo, "operatorAssignModulo"},
    {operatorAssignAdd, "operatorAssignAdd"},
    {operatorAssignSubtract, "operatorAssignSubtract"},
    {operatorAssignLeftShift, "operatorAssignLeftShift"},
    {operatorAssignRightShift, "operatorAssignRightShift"},
    {operatorAssignBitwiseAnd, "operatorAssignBitwiseAnd"},
    {operatorAssignBitwiseOr, "operatorAssignBitwiseOr"},
    {operatorAssignBitwiseXor, "operatorAssignBitwiseXor"},
    {storageClassSpecifierExtern, "storageClassSpecifierExtern"},
    {storageClassSpecifierRegister, "storageClassSpecifierRegister"},
    {storageClassSpecifierStatic, "storageClassSpecifierStatic"},
    {storageClassSpecifierThreadLocal, "storageClassSpecifierThreadLocal"},
    {storageClassSpecifierTypedef, "storageClassSpecifierTypedef"},
    {typeSpecifierVoid, "typeSpecifierVoid"},
    {typeSpecifierChar, "typeSpecifierChar"},
    {typeSpecifierShort, "typeSpecifierShort"},
    {typeSpecifierInt, "typeSpecifierInt"},
    {typeSpecifierLong, "typeSpecifierLong"},
    {typeSpecifierFloat, "typeSpecifierFloat"},
    {typeSpecifierDouble, "typeSpecifierDouble"},
    {typeSpecifierSigned, "typeSpecifierSigned"},
    {typeSpecifierUnsigned, "typeSpecifierUnsigned"},
    {typeSpecifierBool, "typeSpecifierBool"},
    {struct_, "struct_"},
    {union_, "union_"},
    {typeQualifierConst, "typeQualifierConst"},
    {typeQualifierRestrict, "typeQualifierRestrict"},
    {typeQualifierVolatile, "typeQualifierVolatile"},
    {typeQualifierAtomic, "typeQualifierAtomic"},
    {functionSpecifierInline, "functionSpecifierInline"},
    {functionSpecifierNoReturn, "functionSpecifierNoReturn"},
    {starModifier, "starModifier"},
    {varArgs, "varArgs"},
    {gotoStatement, "gotoStatement"},
    {continueStatement, "continueStatement"},
    {breakStatement, "breakStatement"},
    {returnStatement, "returnStatement"},
    {whileStatement, "whileStatement"},
    {doWhileStatement, "doWhileStatement"},
    {forStatement, "forStatement"},
    {ifStatement, "ifStatement"},
    {switchStatement, "switchStatement"},
    {labelStatement, "labelStatement"},
    {caseStatement, "caseStatement"},
    {defaultStatement, "defaultStatement"},
    {primaryExpression, "primaryExpression"},
    {genericSelection, "genericSelection"},
    {genericAssocList, "genericAssocList"},
    {genericAssociation, "genericAssociation"},
    {postfixExpression, "postfixExpression"},
    {argumentExpressionList, "argumentExpressionList"},
    {unaryExpression, "unaryExpression"},
    {unaryOperator, "unaryOperator"},
    {castExpression, "castExpression"},
    {multiplicativeExpression, "multiplicativeExpression"},
    {additiveExpression, "additiveExpression"},
    {shiftExpression, "shiftExpression"},
    {relationalExpression, "relationalExpression"},
    {equalityExpression, "equalityExpression"},
    {bitwiseAndExpression, "bitwiseAndExpression"},
    {bitwiseXorExpression, "bitwiseXorExpression"},
    {bitwiseOrExpression, "bitwiseOrExpression"},
    {logicalAndExpression, "logicalAndExpression"},
    {logicalOrExpression, "logicalOrExpression"},
    {conditionalExpression, "conditionalExpression"},
    {assignmentExpression, "assignmentExpression"},
    {expression, "expression"},
    {constantExpression, "constantExpression"},
    {declaration, "declaration"},
    {declarationSpecifiers, "declarationSpecifiers"},
    {initDeclaratorList, "initDeclaratorList"},
    {initDeclarator, "initDeclarator"},
    {storageClassSpecifier, "storageClassSpecifier"},
    {typeSpecifier, "typeSpecifier"},
    {structOrUnionSpecifier, "structOrUnionSpecifier"},
    {structOrUnion, "structOrUnion"},
    {structDeclarationList, "structDeclarationList"},
    {structDeclaration, "structDeclaration"},
    {specifierQualifierList, "specifierQualifierList"},
    {structDeclaratorList, "structDeclaratorList"},
    {structDeclarator, "structDeclarator"},
    {enumSpecifier, "enumSpecifier"},
    {enumeratorList, "enumeratorList"},
    {enumerator, "enumerator"},
    {atomicTypeSpecifier, "atomicTypeSpecifier"},
    {typeQualifier, "typeQualifier"},
    {functionSpecifier, "functionSpecifier"},
    {alignmentSpecifier, "alignmentSpecifier"},
    {declarator, "declarator"},
    {directDeclarator, "directDeclarator"},
    {pointer, "pointer"},
    {typeQualifierList, "typeQualifierList"},
    {parameterTypeList, "parameterTypeList"},
    {parameterList, "parameterList"},
    {parameterDeclaration, "parameterDeclaration"},
    {identifierList, "identifierList"},
    {typeName, "typeName"},
    {abstractDeclarator, "abstractDeclarator"},
    {directAbstractDeclarator, "directAbstractDeclarator"},
    {typedefName, "typedefName"},
    {initializer, "initializer"},
    {initializerList, "initializerList"},
    {designation, "designation"},
    {designatorList, "designatorList"},
    {designator, "designator"},
    {staticAssertDeclaration, "staticAssertDeclaration"},
    {statement, "statement"},
    {jumpStatement, "jumpStatement"},
    {compoundStatement, "compoundStatement"},
    {declarationList, "declarationList"},
    {statementList, "statementList"},
    {expressionStatement, "expressionStatement"},
    {translationUnit, "translationUnit"},
    {externalDeclaration, "externalDeclaration"},
    {functionDefinition, "functionDefinition"},
};